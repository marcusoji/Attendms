 -- Create a new database for the system (optional, you can use an existing one)
CREATE DATABASE IF NOT EXISTS school_attendance;

-- Use the newly created database
USE school_attendance;

-- Table for Lecturers
CREATE TABLE IF NOT EXISTS lecturers (
    id INT AUTO_INCREMENT PRIMARY KEY,
    lecturer_id VARCHAR(100) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(50),
    password_hash VARCHAR(255) NOT NULL, -- We will store a hashed password, not the plain text
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for Students
CREATE TABLE IF NOT EXISTS students (
    id INT AUTO_INCREMENT PRIMARY KEY,
    mat_no VARCHAR(100) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(50),
    face_scan_path VARCHAR(255) UNIQUE, -- Path to the stored face scan image file
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for Admin Users (simplified for this example)
CREATE TABLE IF NOT EXISTS admins (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- To create an admin user for the first time, you would run this manually
-- You would need to generate a password hash using a bcrypt tool or script.
-- Example: INSERT INTO admins (email, password_hash) VALUES ('admin@school.com', 'a_very_long_secure_hash');

-- Table for Courses
CREATE TABLE IF NOT EXISTS courses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    course_code VARCHAR(50) NOT NULL,
    course_title VARCHAR(255) NOT NULL,
    lecturer_id_fk INT, -- Foreign key linking to the lecturers table
    FOREIGN KEY (lecturer_id_fk) REFERENCES lecturers(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for Attendance Codes generated by Lecturers
-- This table is temporary; codes can be cleared periodically.
CREATE TABLE IF NOT EXISTS attendance_codes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(10) NOT NULL UNIQUE,
    course_id_fk INT,
    lecturer_lat DECIMAL(10, 8), -- Latitude of lecturer when code was generated
    lecturer_lon DECIMAL(11, 8), -- Longitude of lecturer when code was generated
    expires_at DATETIME NOT NULL,
    FOREIGN KEY (course_id_fk) REFERENCES courses(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table for Attendance Records
CREATE TABLE IF NOT EXISTS attendance_records (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id_fk INT,
    course_id_fk INT,
    marked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id_fk) REFERENCES students(id),
    FOREIGN KEY (course_id_fk) REFERENCES courses(id)
);
